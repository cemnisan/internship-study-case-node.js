{"version":3,"sources":["../../src/controller/admin.js"],"names":["signUp","req","res","bcrypt","genSalt","err","salt","username","password","body","hash","newAdmin","Admin","result","save","status","json","message","signIn","findOne","user","compare","then","payload","token","jwt","sign","process","env","API_SECRET_KEY"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;AACO,MAAMA,MAAM,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;AAClCC,oBAAOC,OAAP,CAAe,EAAf,EAAmB,CAACC,GAAD,EAAMC,IAAN,KAAe;AAChC,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAAyBP,GAAG,CAACQ,IAAnC;;AACAN,sBAAOO,IAAP,CAAYF,QAAZ,EAAsBF,IAAtB,EAA4B,OAAOD,GAAP,EAAYK,IAAZ,KAAqB;AAC/C,YAAMC,QAAQ,GAAG,IAAIC,cAAJ,CAAU;AACzBL,QAAAA,QADyB;AAEzBC,QAAAA,QAAQ,EAAEE;AAFe,OAAV,CAAjB;;AAIA,UAAI;AACF,cAAMG,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAArB;AACAZ,QAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,MAArB;AACD,OAHD,CAGE,OAAOR,GAAP,EAAY;AACZH,QAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAEZ;AAAX,SAArB;AACD;AACF,KAXD;AAYD,GAdD;AAeD,CAhBM,C,CAkBP;;;;;AACO,MAAMa,MAAM,GAAG,CAACjB,GAAD,EAAMC,GAAN,KAAc;AAClC,QAAM;AAAEK,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAyBP,GAAG,CAACQ,IAAnC;;AACAG,iBAAMO,OAAN,CAAc;AAAEZ,IAAAA;AAAF,GAAd,EAA4B,CAACF,GAAD,EAAMe,IAAN,KAAe;AACzC,QAAI,CAACA,IAAL,EAAW;AACTlB,MAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB;AACD,KAFD,MAEO;AACLd,wBAAOkB,OAAP,CAAeb,QAAf,EAAyBY,IAAI,CAACZ,QAA9B,EAAwCc,IAAxC,CAA8CT,MAAD,IAAY;AACvD,YAAI,CAACA,MAAL,EAAa;AACXX,UAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB;AACD,SAFD,MAEO;AACL,gBAAMM,OAAO,GAAG;AACdhB,YAAAA;AADc,WAAhB;;AAGA,gBAAMiB,KAAK,GAAGC,sBAAIC,IAAJ,CAASH,OAAT,EAAkBI,OAAO,CAACC,GAAR,CAAYC,cAA9B,CAAd;;AACA3B,UAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBQ,KAArB;AACD;AACF,OAVD;AAWD;AACF,GAhBD;AAiBD,CAnBM","sourcesContent":["import bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport Admin from \"../model/Admin\";\n\n// Create Admin\nexport const signUp = (req, res) => {\n  bcrypt.genSalt(10, (err, salt) => {\n    const { username, password } = req.body;\n    bcrypt.hash(password, salt, async (err, hash) => {\n      const newAdmin = new Admin({\n        username,\n        password: hash,\n      });\n      try {\n        const result = await newAdmin.save();\n        res.status(201).json(result);\n      } catch (err) {\n        res.status(500).json({ message: err });\n      }\n    });\n  });\n};\n\n// Admin Login\nexport const signIn = (req, res) => {\n  const { username, password } = req.body;\n  Admin.findOne({ username }, (err, user) => {\n    if (!user) {\n      res.status(404).json({ message: \"This username is not found.\" });\n    } else {\n      bcrypt.compare(password, user.password).then((result) => {\n        if (!result) {\n          res.status(404).json({ message: \"This password is wrong\" });\n        } else {\n          const payload = {\n            username,\n          };\n          const token = jwt.sign(payload, process.env.API_SECRET_KEY);\n          res.status(200).json(token);\n        }\n      });\n    }\n  });\n};\n"],"file":"admin.js"}